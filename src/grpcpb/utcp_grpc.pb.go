// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: grpcpb/utcp.proto

package grpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UTCPService_GetManual_FullMethodName = "/grpcpb.UTCPService/GetManual"
	UTCPService_CallTool_FullMethodName  = "/grpcpb.UTCPService/CallTool"
)

// UTCPServiceClient is the client API for UTCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UTCPServiceClient interface {
	GetManual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Manual, error)
	CallTool(ctx context.Context, in *ToolCallRequest, opts ...grpc.CallOption) (*ToolCallResponse, error)
}

type uTCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUTCPServiceClient(cc grpc.ClientConnInterface) UTCPServiceClient {
	return &uTCPServiceClient{cc}
}

func (c *uTCPServiceClient) GetManual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Manual, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Manual)
	err := c.cc.Invoke(ctx, UTCPService_GetManual_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTCPServiceClient) CallTool(ctx context.Context, in *ToolCallRequest, opts ...grpc.CallOption) (*ToolCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToolCallResponse)
	err := c.cc.Invoke(ctx, UTCPService_CallTool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTCPServiceServer is the server API for UTCPService service.
// All implementations must embed UnimplementedUTCPServiceServer
// for forward compatibility
type UTCPServiceServer interface {
	GetManual(context.Context, *Empty) (*Manual, error)
	CallTool(context.Context, *ToolCallRequest) (*ToolCallResponse, error)
	mustEmbedUnimplementedUTCPServiceServer()
}

// UnimplementedUTCPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUTCPServiceServer struct {
}

func (UnimplementedUTCPServiceServer) GetManual(context.Context, *Empty) (*Manual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManual not implemented")
}
func (UnimplementedUTCPServiceServer) CallTool(context.Context, *ToolCallRequest) (*ToolCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTool not implemented")
}
func (UnimplementedUTCPServiceServer) mustEmbedUnimplementedUTCPServiceServer() {}

// UnsafeUTCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UTCPServiceServer will
// result in compilation errors.
type UnsafeUTCPServiceServer interface {
	mustEmbedUnimplementedUTCPServiceServer()
}

func RegisterUTCPServiceServer(s grpc.ServiceRegistrar, srv UTCPServiceServer) {
	s.RegisterService(&UTCPService_ServiceDesc, srv)
}

func _UTCPService_GetManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTCPServiceServer).GetManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UTCPService_GetManual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTCPServiceServer).GetManual(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTCPService_CallTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToolCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTCPServiceServer).CallTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UTCPService_CallTool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTCPServiceServer).CallTool(ctx, req.(*ToolCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UTCPService_ServiceDesc is the grpc.ServiceDesc for UTCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UTCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcpb.UTCPService",
	HandlerType: (*UTCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManual",
			Handler:    _UTCPService_GetManual_Handler,
		},
		{
			MethodName: "CallTool",
			Handler:    _UTCPService_CallTool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcpb/utcp.proto",
}
